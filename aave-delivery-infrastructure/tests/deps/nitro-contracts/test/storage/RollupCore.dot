
digraph StorageDiagram {
rankdir=LR
color=black
arrowhead=open
node [shape=record, style=filled, fillcolor=gray95 fontname="Courier New"]
8 [label="RollupCore \<\<Contract\>\>\n | {{ slot| 0 | 1-50 | 51 | 52-100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 } | { type: \<inherited contract\>.variable (bytes) | {  unallocated (30)  |  bool: Initializable._initializing (1)  |  bool: Initializable._initialized (1) } | { <53> uint256[50]: ContextUpgradeable.__gap (1600) } | {  unallocated (31)  |  bool: PausableUpgradeable._paused (1) } | { <104> uint256[49]: PausableUpgradeable.__gap (1568) } | {  unallocated (16)  |  uint64: extraChallengeTimeBlocks (8)  |  uint64: confirmPeriodBlocks (8) } | {  uint256: chainId (32) } | {  uint256: baseStake (32) } | {  bytes32: wasmModuleRoot (32) } | {  unallocated (12)  |  IInbox: inbox (20) } | {  unallocated (12)  |  IBridge: bridge (20) } | {  unallocated (12)  |  IOutbox: outbox (20) } | {  unallocated (12)  |  ISequencerInbox: sequencerInbox (20) } | {  unallocated (12)  |  IRollupEventInbox: rollupEventInbox (20) } | {  unallocated (12)  |  IChallengeManager: challengeManager (20) } | {  unallocated (12)  |  address: validatorUtils (20) } | {  unallocated (12)  |  address: validatorWalletCreator (20) } | {  unallocated (12)  |  address: loserStakeEscrow (20) } | {  unallocated (12)  |  address: stakeToken (20) } | {  uint256: minimumAssertionPeriod (32) } | {  mapping\(address=\>bool\): isValidator (32) } | {  uint64: _lastStakeBlock (8)  |  uint64: _latestNodeCreated (8)  |  uint64: _firstUnresolvedNode (8)  |  uint64: _latestConfirmed (8) } | { <138> mapping\(uint64=\>Node\): _nodes (32) } | {  mapping\(uint64=\>mapping\(address=\>bool\)\): _nodeStakers (32) } | { <141> address[]: _stakerList (32) } | { <147> mapping\(address=\>Staker\): _stakerMap (32) } | { <151> Zombie[]: _zombies (32) } | {  mapping\(address=\>uint256\): _withdrawableFunds (32) } | {  uint256: totalWithdrawableFunds (32) } | {  uint256: rollupDeploymentBlock (32) } | {  unallocated (31)  |  bool: validatorWhitelistDisabled (1) }}}"]

1 [label="uint256[50]: __gap \<\<Array\>\>\n | {{ slot| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 } | { type: variable (bytes) | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) }}}"]

2 [label="uint256[49]: __gap \<\<Array\>\>\n | {{ slot| 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 } | { type: variable (bytes) | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) } | {  uint256 (32) }}}"]

3 [label="Node \<\<Struct\>\>\n | {{ slot| 0 | 1 | 2 | 3 | 4 | 5 } | { type: variable (bytes) | {  bytes32: stateHash (32) } | {  bytes32: challengeHash (32) } | {  bytes32: confirmData (32) } | {  uint64: stakerCount (8)  |  uint64: noChildConfirmedBeforeBlock (8)  |  uint64: deadlineBlock (8)  |  uint64: prevNum (8) } | {  uint64: createdAtBlock (8)  |  uint64: latestChildNumber (8)  |  uint64: firstChildBlock (8)  |  uint64: childStakerCount (8) } | {  bytes32: nodeHash (32) }}}"]

4 [label="address[]: _stakerList \<\<Array\>\>\n0x315040cf50a9fea58aa3302eb9bbbb1153c7ed7311c4e1c76711b1190d535025 | {{ slot| 0 } | { type: variable (bytes) | {  unallocated (12)  |  address (20) }}}"]

5 [label="Staker \<\<Struct\>\>\n | {{ slot| 0 | 1 } | { type: variable (bytes) | {  uint256: amountStaked (32) } | {  unallocated (7)  |  bool: isStaked (1)  |  uint64: currentChallenge (8)  |  uint64: latestStakedNode (8)  |  uint64: index (8) }}}"]

6 [label="Zombie \<\<Struct\>\>\n | {{ slot| 0 } | { type: variable (bytes) | {  unallocated (4)  |  uint64: latestStakedNode (8)  |  address: stakerAddress (20) }}}"]

7 [label="Zombie[]: _zombies \<\<Array\>\>\n0x8e4a4be60bf9672655845da331c63e49fa2a771e90e72dc554369cbb34aae7b8 | {{ slot| 0 } | { type: variable (bytes) | { <148> Zombie (32) }}}"]

 8:53 -> 1
 8:104 -> 2
 8:138 -> 3
 8:141 -> 4
 8:147 -> 5
 8:151 -> 7
 7:148 -> 6
}